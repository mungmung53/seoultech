{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "mount_file_id": "1xnPZQkJw8Agx5Ab_sooYJ8ciknLqLJ1B",
      "authorship_tag": "ABX9TyMJ0jajoEiOVw2WQTDMQsL4",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/mungmung53/seoultech/blob/main/model.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "여기서는 LeNet-5와 사용자 정의 MLP 모델을 정의"
      ],
      "metadata": {
        "id": "_SvcY-xJXBFs"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import torch\n",
        "import torch.nn as nn\n",
        "import torch.nn.functional as F\n",
        "\n",
        "class LeNet5(nn.Module):\n",
        "    \"\"\" LeNet-5 (LeCun et al., 1998)\n",
        "\n",
        "        - For a detailed architecture, refer to the lecture note\n",
        "        - Freely choose activation functions as you want\n",
        "        - For subsampling, use max pooling with kernel_size = (2,2)\n",
        "        - Output should be a logit vector\n",
        "    \"\"\"\n",
        "\n",
        "    def __init__(self):\n",
        "        super(LeNet5, self).__init__()\n",
        "        self.conv1 = nn.Conv2d(1, 6, 5)  # 1 input channel, 6 output channels, 5x5 kernel size\n",
        "        self.pool = nn.MaxPool2d(kernel_size=2, stride=2)\n",
        "        self.conv2 = nn.Conv2d(6, 16, 5)  # 6 input channels, 16 output channels, 5x5 kernel size\n",
        "        self.fc1 = nn.Linear(16 * 4 * 4, 120)  # Fully connected layer\n",
        "        self.fc2 = nn.Linear(120, 84)  # Fully connected layer\n",
        "        self.fc3 = nn.Linear(84, 10)  # Output layer\n",
        "\n",
        "    def forward(self, x):\n",
        "        x = nn.functional.relu(self.conv1(x))\n",
        "        x = nn.functional.max_pool2d(x, 2)\n",
        "        x = nn.functional.relu(self.conv2(x))\n",
        "        x = nn.functional.max_pool2d(x, 2)\n",
        "        x = x.view(-1, 16 * 4 * 4)  # Flatten the tensor\n",
        "        x = nn.functional.relu(self.fc1(x))\n",
        "        x = nn.functional.relu(self.fc2(x))\n",
        "        x = self.fc3(x)\n",
        "        return x\n",
        "\n",
        "class CustomMLP(nn.Module):\n",
        "    \"\"\" Your custom MLP model\n",
        "\n",
        "        - Note that the number of model parameters should be about the same\n",
        "          with LeNet-5\n",
        "    \"\"\"\n",
        "\n",
        "    def __init__(self):\n",
        "        # write your codes here\n",
        "        super(CustomMLP, self).__init__()\n",
        "        self.conv_layers = nn.Sequential(\n",
        "            # C1 (5*5*1+1)*6 = 156\n",
        "            nn.Conv2d(in_channels=1, out_channels=6, kernel_size=5,\n",
        "                      stride=1, padding=2, bias=True),\n",
        "            nn.Tanh(),\n",
        "            # S2\n",
        "            nn.AvgPool2d(kernel_size=2, stride=2),\n",
        "            # C3 (5*5*6+1)*16 = 2416\n",
        "            nn.Conv2d(in_channels=6, out_channels=16, kernel_size=5,\n",
        "                      stride=1, padding=0, bias=True),\n",
        "            nn.Tanh(),\n",
        "            # S4\n",
        "            nn.AvgPool2d(kernel_size=2, stride=2)\n",
        "        )\n",
        "        self.fc_layers = nn.Sequential(\n",
        "            # C5 (16*5*5+1)*120 = 48120\n",
        "            nn.Linear(in_features=16 * 5 * 5, out_features=120),\n",
        "            nn.Tanh(),\n",
        "            # F6 (120+1)*84 = 10164\n",
        "            nn.Linear(in_features=120, out_features=84),\n",
        "            nn.Tanh(),\n",
        "            # OUTPUT (84+1)*10 = 850\n",
        "            nn.Linear(in_features=84, out_features=10),\n",
        "            nn.Softmax(dim=1)\n",
        "        )\n",
        "\n",
        "        # Total number of parameters = 123,412\n",
        "        # 156+2,416+48,120+10,164+850 = 61,706\n",
        "        # backpropagation 61,706\n",
        "\n",
        "    def forward(self, img):\n",
        "        # write your codes here\n",
        "        x = self.conv_layers(img)\n",
        "        x = x.view(-1, 16 * 5 * 5)\n",
        "        output = self.fc_layers(x)\n",
        "        return output\n",
        "\n",
        "class LeNet5moon(nn.Module):\n",
        "    def __init__(self):\n",
        "        super(LeNet5moon, self).__init__()  # 부모 클래스인 nn.Module의 생성자 호출\n",
        "        self.conv1 = nn.Conv2d(1, 6, kernel_size=5, padding=2)\n",
        "        self.bn1 = nn.BatchNorm2d(6)\n",
        "        self.pool = nn.MaxPool2d(kernel_size=2, stride=2)\n",
        "        self.conv2 = nn.Conv2d(6, 16, kernel_size=5)\n",
        "        self.bn2 = nn.BatchNorm2d(16)\n",
        "        self.fc1 = nn.Linear(16 * 5 * 5, 120)\n",
        "        self.dropout1 = nn.Dropout(0.5)\n",
        "        self.fc2 = nn.Linear(120, 84)\n",
        "        self.dropout2 = nn.Dropout(0.5)\n",
        "        self.fc3 = nn.Linear(84, 10)  # 10개 클래스를 가정한 이미지 분류\n",
        "\n",
        "    def forward(self, img):\n",
        "        x = self.pool(F.relu(self.bn1(self.conv1(img))))\n",
        "        x = self.pool(F.relu(self.bn2(self.conv2(x))))\n",
        "        x = x.view(-1, 16 * 5 * 5)\n",
        "        x = F.relu(self.fc1(self.dropout1(x)))\n",
        "        x = F.relu(self.fc2(self.dropout2(x)))\n",
        "        output = self.fc3(x)\n",
        "        return output\n",
        "\n",
        "class LeNet5moon2(nn.Module):\n",
        "    def __init__(self):\n",
        "        super(LeNet5moon2, self).__init__()\n",
        "        self.conv1 = nn.Conv2d(1, 10, kernel_size=5, padding=2)\n",
        "        self.bn1 = nn.BatchNorm2d(10)\n",
        "        self.pool = nn.MaxPool2d(kernel_size=2, stride=2)\n",
        "        self.conv2 = nn.Conv2d(10, 32, kernel_size=5)\n",
        "        self.bn2 = nn.BatchNorm2d(32)\n",
        "        self.fc1 = nn.Linear(32 * 5 * 5, 120)  # Adjust the dimensions according to your input size\n",
        "        self.dropout1 = nn.Dropout(0.5)\n",
        "        self.fc2 = nn.Linear(120, 84)\n",
        "        self.dropout2 = nn.Dropout(0.5)\n",
        "        self.fc3 = nn.Linear(84, 10)\n",
        "\n",
        "    def forward(self, img):\n",
        "        x = self.pool(F.relu(self.bn1(self.conv1(img))))\n",
        "        x = self.pool(F.relu(self.bn2(self.conv2(x))))\n",
        "        x = x.view(-1, 32 * 5 * 5)  # Flatten the tensor before feeding into fully connected layer\n",
        "        x = F.relu(self.fc1(self.dropout1(x)))\n",
        "        x = F.relu(self.fc2(self.dropout2(x)))\n",
        "        output = self.fc3(x)\n",
        "        return output\n"
      ],
      "metadata": {
        "id": "a_DL9H6cKNCg"
      },
      "execution_count": 3,
      "outputs": []
    }
  ]
}